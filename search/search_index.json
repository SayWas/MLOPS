{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MLOps Project","text":"<p>Welcome to the MLOps Project documentation! Here you\u2019ll find guidelines for getting started, workflow, Docker usage, CI/CD, and DVC practices.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Setup</li> <li>GitHub Flow</li> <li>Docker</li> <li>CI/CD Pipeline</li> </ul>"},{"location":"ci-cd/","title":"CI/CD Pipeline","text":"<p>A full CI/CD pipeline is configured using GitHub Actions:</p> <ul> <li>Linting and static checks: Black, Ruff, and MyPy are run on every PR, push, and release tag.</li> <li>Testing: All unit tests are run with pytest and coverage is collected.</li> <li>Python package build: The package is built using Poetry.</li> <li>Docker image build and publish: The Docker image is pushed to GitHub Container Registry (ghcr.io).</li> <li>Documentation publishing: Documentation is automatically deployed to GitHub Pages.</li> </ul> <p>The pipeline is triggered on:</p> <ul> <li>Pull Requests to <code>main</code></li> <li>Pushes to <code>main</code></li> <li>Tag pushes like <code>v*</code> (releases)</li> </ul> <p>You can find the full pipeline config in .github/workflows/ci.yml.</p>"},{"location":"docker/","title":"Docker","text":""},{"location":"docker/#running-with-docker","title":"Running with Docker","text":"<p>You can also use Docker to run the project.</p>"},{"location":"docker/#using-docker-compose-recommended","title":"Using Docker Compose (recommended):","text":"<p>For development (interactive mode):</p> <pre><code>docker compose build dev\ndocker compose run --rm dev\n</code></pre> <p>For production:</p> <pre><code>docker compose build app\ndocker compose up app\n</code></pre>"},{"location":"docker/#using-plain-docker","title":"Using plain Docker:","text":"<p>Development:</p> <pre><code>docker build --target development -t mlops-dev .\ndocker run -it --rm mlops-dev\n</code></pre> <p>Production:</p> <pre><code>docker build --target production -t mlops .\ndocker run -it --rm mlops\n</code></pre> <p>All environment variables and volumes are described in docker-compose.yaml.</p>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#quick-start","title":"Quick Start","text":"<ol> <li>Clone the repository and go to the project folder:</li> </ol> <pre><code>git clone &lt;repo_url&gt;\ncd &lt;project_folder&gt;\n</code></pre> <ol> <li>Install Poetry (if not installed):</li> </ol> <pre><code>(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -\n</code></pre> <ol> <li>Install all dependencies:</li> </ol> <pre><code>poetry install\n</code></pre> <ol> <li>Install pre-commit hooks (once):</li> </ol> <pre><code>poetry run pre-commit install\n</code></pre> <ol> <li> <p>Main development commands (run each separately using Poetry):</p> </li> <li> <p>Code formatting:</p> <p><pre><code>poetry run black .\npoetry run ruff format\n</code></pre>    * Linting and type checking:</p> <p><pre><code>poetry run black . --check\npoetry run mypy mlops/\n</code></pre>    * Run tests:</p> <p><pre><code>poetry run pytest --cov=mlops\n</code></pre>    * Run pre-commit hooks manually:</p> <p><pre><code>poetry run pre-commit run --all-files\n</code></pre>    * Quick app run:</p> <p><pre><code>poetry run python -m mlops\n</code></pre>    * Activate Poetry environment:</p> <pre><code>poetry shell\n</code></pre> </li> </ol>"},{"location":"setup/#dependencies","title":"Dependencies","text":"<p>Poetry is used for dependency management:</p> <pre><code>poetry install                 # Install all dependencies\npoetry add &lt;lib&gt;               # Add a library\npoetry add --group dev &lt;lib&gt;   # Add a dev dependency\n</code></pre>"},{"location":"setup/#data-version-control-dvc","title":"Data Version Control (DVC)","text":"<p>This project uses Data Version Control (DVC) to manage and version datasets and machine learning models.</p>"},{"location":"setup/#getting-started-with-dvc","title":"Getting Started with DVC","text":"<ol> <li>Install DVC (if not already installed):</li> </ol> <p><pre><code>poetry add --group dev dvc\n</code></pre> 2. Initialize DVC in the project (do once):</p> <pre><code>dvc init\ngit add .dvc .dvcignore\ngit commit -m \"Initialize DVC\"\n</code></pre>"},{"location":"setup/#versioning-data-and-models","title":"Versioning Data and Models","text":"<ol> <li>Add raw and processed data to DVC:</li> </ol> <pre><code>dvc add data/raw/train.csv data/raw/test.csv\n</code></pre> <p>This creates <code>.dvc</code> tracking files for your datasets. 2. Commit the DVC metafiles and gitignore updates:</p> <p><pre><code>git add data/raw/*.dvc data/processed/*.dvc models/*.dvc .gitignore\ngit commit -m \"Track data and models with DVC\"\n</code></pre> 3. (Optional) Push data to remote storage (e.g., S3, Google Drive):</p> <p><pre><code>dvc push\n</code></pre> 4. To pull the latest datasets and models:</p> <pre><code>dvc pull\n</code></pre> <p>Always commit the generated <code>.dvc</code> files to Git to track the versions of your datasets and models, while keeping the actual large files outside the Git repository. This enables team collaboration and experiment reproducibility.</p>"},{"location":"workflow/","title":"GitHub Flow","text":"<p>This project follows the standard GitHub Flow for collaborative development:</p> <ol> <li>Create a branch:</li> </ol> <p><pre><code>git checkout main\ngit pull\ngit checkout -b feature/your-feature-name\n</code></pre> 2. Make changes and commit:</p> <p><pre><code>git add .\ngit commit -m \"Short description of the changes\"\n</code></pre> 3. Open a Pull Request:</p> <pre><code>git push -u origin feature/your-feature-name\n</code></pre> <ul> <li>Go to GitHub \u2192 Pull Requests \u2192 New Pull Request</li> <li>Select your branch, create a PR</li> <li>Wait for review and CI:    Wait for automatic checks to complete and address any comments.</li> <li>Merge:    After approval, merge to main (usually via \"Squash and merge\").</li> <li>Delete the branch:</li> </ul> <pre><code>git branch -d feature/your-feature-name\ngit push origin --delete feature/your-feature-name\n</code></pre>"}]}